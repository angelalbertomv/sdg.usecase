# # # # # # # # # # # # #   DEV deployment   # # # # # # # # # # # # #
#
# Deploys terraform configuration in `master` branch to DEV environment
# 
# You need to create an Environment named `DEV` with the next secrets:
#   - ARM_BACKEND_NAME: ${{ secrets.ARM_BACKEND_NAME }}
#   - ARM_BACKEND_RG: ${{ secrets.ARM_BACKEND_RG }}
#   - ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#   - ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
#   - ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#   - ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
name: SDG use case

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  tf_backend_container_name: tfstate
  tf_backend_tfstate_name: workload.tfstate
    
jobs:
# You can add any static validation steps you need here:
# - tflint
# - terraform-docs
# - pre-commit
# - etc.
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Format check
        run: |
          terraform fmt --recursive -check=true
      
  plan:
    environment: master
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.x
        terraform_wrapper: true
    - name: Setup Github credentials
      run: |
        cat << EOF > .git/credentials
        https://github:$PAT@github.com
        EOF
        git config --system credential.helper 'store --file=.git/credentials'
      env:
        PAT: ${{ secrets.ACTIONS_TOKEN }}
    - name: Plan
      id: plan
      run: |
        terraform init -no-color -backend-config=container_name=${{ env.tf_backend_container_name }} -backend-config=key=${{ env.tf_backend_tfstate_name }} \
          -backend-config=storage_account_name=$ARM_BACKEND_NAME -backend-config=resource_group_name=$ARM_BACKEND_RG \
          -backend-config=arm_subscription_id=$ARM_SUBSCRIPTION_ID -backend-config=arm_tenant_id=$ARM_TENANT_ID \
          -backend-config=arm_client_id=$ARM_CLIENT_ID -backend-config=arm_client_secret=$ARM_CLIENT_SECRET
        terraform plan -no-color -input=false
      env:
        ARM_BACKEND_NAME: ${{ secrets.ARM_BACKEND_NAME }}
        ARM_BACKEND_RG: ${{ secrets.ARM_BACKEND_RG }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    - run: |
        git config --system --unset credential.helper
        rm .git/credentials
      if: ${{ always() }}
    - uses: actions/github-script@v3.1
      name: Add plan to PR comment      
      env:
        STDOUT: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.STDOUT
          })
          
  apply:
    environment: master
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    - name: Apply
      working-directory: aks_deploy
      run: |
        terraform init -no-color -backend-config=container_name=${{ env.tf_backend_container_name }} -backend-config=key=${{ env.tf_backend_tfstate_name }} \
          -backend-config=storage_account_name=$ARM_BACKEND_NAME -backend-config=resource_group_name=$ARM_BACKEND_RG \
          -backend-config=arm_subscription_id=$ARM_SUBSCRIPTION_ID -backend-config=arm_tenant_id=$ARM_TENANT_ID \
          -backend-config=arm_client_id=$ARM_CLIENT_ID -backend-config=arm_client_secret=$ARM_CLIENT_SECRET
        terraform apply -auto-approve -input=false
      env:
        ARM_BACKEND_NAME: ${{ secrets.ARM_BACKEND_NAME }}
        ARM_BACKEND_RG: ${{ secrets.ARM_BACKEND_RG }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}